# This is a CMake build file, for more information consult:
# http://en.wikipedia.org/wiki/CMake
# and
# http://www.cmake.org/Wiki/CMake
# http://www.cmake.org/cmake/help/syntax.html
# http://www.cmake.org/Wiki/CMake_Useful_Variables
# http://www.cmake.org/cmake/help/cmake-2-8-docs.html

# to compile the local code you can use: cmake ./ && make -j2

# ----------------------------------------------------------------------
# Base CMake setup
cmake_minimum_required (VERSION 2.8)
find_package(OpenCV 2.4 REQUIRED)

#-----------------   common setting -------------------
SET(ROOT_DIR ../../)
SET(EXECUTABLE_OUTPUT_PATH ${ROOT_DIR})
option(FLY_CAMERA "Should the point gray camera be used ?" FALSE)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES("./")

MESSAGE(STATUS "CMAKE_CURRENT_BINARY_DIR " ${CMAKE_CURRENT_BINARY_DIR})

#-------------------------- add common files 	-------------------------
SET(src_main
    "main.cpp"
    "widget_demo.cpp"
    "demo_interface.cpp")

SET(test_main
    "test_main.cpp")
file(GLOB h_main
    "*.hpp")
set(h_qt "widget_demo.h")


MESSAGE(STATUS "CPP: " ${src_main})
MESSAGE(STATUS "H: " ${h_qt})


add_subdirectory(ex_code)
add_subdirectory(background_cut)
add_subdirectory(visual_features)
add_subdirectory(multi_tracker)
add_subdirectory(saliency_cut)
add_subdirectory(tricky_part)

if(USE_CAFFE)
add_subdirectory(caffe)
endif(USE_CAFFE)




if(FLY_CAMERA)
	add_subdirectory(fly_capture)
endif(FLY_CAMERA)

#-----------------  set QT files ---------------
option(QT4_FLAG "Are you using qt4 || qt5 ?" FALSE)
if(QT4_FLAG) # qt 4
	FIND_PACKAGE(Qt REQUIRED)
	MESSAGE(STATUS "QT_USE_FILE" ${QT_USE_FILE}) # include qt cmake files
	INCLUDE(${QT_USE_FILE})
else() # qt 5
	set(CMAKE_PREFIX_PATH "${local_QT_PATH}/lib/cmake/Qt5Declarative")
	MESSAGE(STATUS "CMAKE_PREFIX_PATH" ${CMAKE_PREFIX_PATH}) # include qt cmake files
	find_package(Qt5Declarative)
	
	set(CMAKE_PREFIX_PATH "D:/Qt/Qt5.1.1/5.1.1/msvc2012_64_opengl/lib/cmake/Qt5Widgets")
	MESSAGE(STATUS "CMAKE_PREFIX_PATH" ${CMAKE_PREFIX_PATH}) # include qt cmake files
	find_package(Qt5Widgets)
	
	# Find includes in corresponding build directories
	#set(CMAKE_INCLUDE_CURRENT_DIR ON)
	# Instruct CMake to run moc automatically when needed.
	#set(CMAKE_AUTOMOC ON)

	# The Qt5Widgets_INCLUDES also includes the include directories for
	# dependencies QtCore and QtGui
	MESSAGE(STATUS "Qt5Widgets_INCLUDES " ${Qt5Widgets_INCLUDE_DIRS}) # include qt cmake files
	include_directories(${Qt5Declarative_INCLUDES})
        include_directories(${Qt5Widgets_INCLUDE_DIRS})
	
	include_directories("D:/Qt/Qt5.1.1/5.1.1/msvc2012_64_opengl/include/QtGui")
	include_directories("D:/Qt/Qt5.1.1/5.1.1/msvc2012_64_opengl/include/QtWidget")
	
	# We need add -DQT_WIDGETS_LIB when using QtWidgets in Qt 5.
        add_definitions(${Qt5Widgets_DEFINITIONS})
endif()

SET(src_forms widget_demo.ui)
if(QT4_FLAG)
QT4_WRAP_UI(headers_ui ${src_forms})
QT4_WRAP_CPP(h_moc ${h_qt})
else()
QT5_WRAP_UI(headers_ui ${src_forms})
QT5_WRAP_CPP(h_moc ${h_qt})
endif(QT4_FLAG)

#----------------- UNIX and WINDOWS difference -------------
if(UNIX)
set(QT_ROOT "/usr/share/qt4")
set(opencv_LIBRARIES
    opencv_core opencv_imgproc opencv_highgui opencv_ml
    opencv_video opencv_features2d
    opencv_calib3d
    opencv_objdetect opencv_contrib
    opencv_legacy opencv_flann
   ) # quick hack for opencv2.4 support
if(USE_GPU)
list(APPEND opencv_LIBRARIES opencv_gpu)
endif(USE_GPU)

#-----intel mkl libraray
link_directories("${local_MKL_DIR}/lib/intel64/"
                "${local_MKL_DIR}/lib/ia32/")
#---- cuda libraray ----
link_directories(${local_CUDA_LIB_DIR})




elseif(WIN32) 
link_directories(
	${local_LIBRARY_DIRS_ALL}
)

set(opencv_LIBRARIES
	opencv_core247 opencv_imgproc247 opencv_highgui247 opencv_ml247
	opencv_video247 opencv_features2d247
	opencv_calib3d247
	opencv_objdetect247 opencv_contrib247
	opencv_legacy247 opencv_flann247
	) # quick hack for opencv2.4 support
if(USE_GPU)
list(APPEND opencv_LIBRARIES opencv_gpu247)
endif(USE_GPU)

if(${local_VS_VERSION} STREQUAL vs2012)
set(boost_LIBRARIES
	"libboost_program_options-vc110-mt-1_${local_BOOST_VERSION}"
	"libboost_filesystem-vc110-mt-1_${local_BOOST_VERSION}"
	"libboost_system-vc110-mt-1_${local_BOOST_VERSION}"
	"libboost_thread-vc110-mt-1_${local_BOOST_VERSION}"
	)
elseif(${local_VS_VERSION} STREQUAL vs2010)
set(boost_LIBRARIES
	"libboost_program_options-vc100-mt-1_${local_BOOST_VERSION}"
	"libboost_filesystem-vc100-mt-1_${local_BOOST_VERSION}"
	"libboost_system-vc100-mt-1_${local_BOOST_VERSION}"
	"libboost_thread-vc100-mt-1_${local_BOOST_VERSION}"
	)
endif()

set(other_LIBRARIES
  	libpng.lib
	libjpeg.lib
	zlib
	SDL.lib
    libprotobuf.lib
    libprotoc.lib
	)

set(QT_LIBRARIES 
    ${QT_LIBRARIES}
    Qt5Widgets
    Qt5Core
    Qt5Gui
    )


endif()




#------------------ build application -----------
SET(appname main_demo)
SET(test_app_name test_demo)

ADD_EXECUTABLE(${appname} ${src_main} ${h_moc} ${headers_ui} ${h_main})
MESSAGE(STATUS "ui: " ${headers_ui})
ADD_EXECUTABLE(${test_app_name} widget_demo.cpp demo_interface.cpp ${test_main} ${h_moc} ${headers_ui} ${h_main})

MESSAGE(STATUS "qt: " ${QT_LIBRARIES})
TARGET_LINK_LIBRARIES( ${appname}
		${QT_QTMAIN_LIBRARY} 
        ${QT_LIBRARIES}
        yl_objects_detector
        yl_cpp_stuff_library
        yl_background_cut
        yl_visual_features
        multi_track
        yl_saliency_cut
        yl_tricky_part
        ${boost_LIBRARIES}
        ${opencv_LIBRARIES}
        )

		
TARGET_LINK_LIBRARIES( ${test_app_name}
        ${QT_QTMAIN_LIBRARY}
        ${QT_LIBRARIES}
        yl_objects_detector
        yl_cpp_stuff_library
        yl_background_cut
        yl_visual_features
        multi_track
        yl_saliency_cut
        yl_tricky_part
        ${boost_LIBRARIES}
        ${opencv_LIBRARIES}
        )

if(USE_GPU)
    TARGET_LINK_LIBRARIES( ${appname}
            yl_cuda_stuff_library
            )


    TARGET_LINK_LIBRARIES( ${test_app_name}
            yl_cuda_stuff_library
            )
endif(USE_GPU)
		
if(USE_CAFFE)
    TARGET_LINK_LIBRARIES( ${appname}
        yl_caffe
            )


    TARGET_LINK_LIBRARIES( ${test_app_name}
        yl_caffe
            )

    if(USE_GPU)
        TARGET_LINK_LIBRARIES( ${appname}
            yl_caffe_gpu
                )


        TARGET_LINK_LIBRARIES( ${test_app_name}
            yl_caffe_gpu
                )
    endif(USE_GPU)
endif(USE_CAFFE)

# TO REFER COMMAND ----------- yl
#find_package(CUDA 4.0 REQUIRED)
# collect source files
#file( GLOB  hdr *.hpp *.h )
#MESSAGE(STATUS "CUDA FILES ARE: " ${src_cuda})
#SET (HW3_files main.cpp loadSaveImage.cpp reference_calc.cpp compare.cpp)
